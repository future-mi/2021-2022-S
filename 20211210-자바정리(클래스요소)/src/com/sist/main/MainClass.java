package com.sist.main;
/*
 * 		클래스의 구성요소
 * ======================================
 * 	1. 변수 - 데이터 저장장소 
 * 		(1)인스턴스변수 : 객체생성시 따로 생성 → int
 * 		(2)정적변수 : 공유(한개만 생성) → static int
 * 		(3)지역변수 (루프변수,플로그변수,누적변수) → 메소드 안에서만 처리하는 변수
 * 			- 루프변수 : for(int i=0;i<10;i++)
 * 			- 플로그변수
 * 			- 누적변수 : int sum=0;
 * ======================================
 * 	2. 생성자 : 멤버변수의 초기화
 * 			  생성자는 여러개 제작이 가능하다(오버로딩)
 * 			  생성자는 반드시 필요한 것이 아니다(생성자가 없는 경우 자동으로 한개가 생성되어 있음 → default 생성자)
 * 		(1) 오버로딩
 * 			- 같은 클래스 안에서 사용
 * 			- 같은 메소드 명으로 사용
 * 			- 매개변수의 갯수나 데이터 형이 다름
 * 			- 리터형은 관계 없음
 *		(2) 특징
 *			1) 리턴형이 존재하지 않음
 *				class A
 *				{
 *					A(){}    		   → 생성자
 *					A(int a){}  	   → 생성자
 *					void A(double d){} → 일반멤버
 *				}  	
 *			2) 클래스 명과 동일
 *				사용처 → 네트워크, 윈도우, 데이터베이스
 *					◎ 네트워크 : 서버구동
 *					◎ 윈도우 : 화면 UI
 *					◎ 데이터베이스 : 드라이버연결
 *				→ 시작과 동시에 한번만 호출하기 때문에 많이씀
 *				→ 생성자를 여러개 호출한다는것은 → 객체를 여러개 생성하겠다는 뜻
 *			3) 상속 예외 조건
 * ======================================
 * 	3. 기능설정 : 메소드
 * 		(1)구조화 프로그램 : 관련된 명령문을 모아서 한꺼번에 처리할 목적
 * 		(2)반복을 제거할 경우에 주로 사용
 * 		(3)한가지 기능을 수행할 수 있게 만듦
 * 		(4)재사용시 주로 이용
 * 		(5)요청을 받아서 결과값을 보내주는 역할
 * 		   ========         ========
 * 		매개변수(여러개사용가능)   리턴형(한개만 사용가능)
 *		↑ 3개이상 초과 금지		↑ 여러개를 보내는 경우(클래스,배열) 
 *			◎ 가변매개변수 : int...
 *						 (1)
 *						 (1,2)
 *					     (1,2,3)...
 *						 printf("%d",1)
 *						 printf("%d%d%d",5,4,5)
 *		 (6)메소드 매개변수 전송방식
 *			1)Call By Value(값에 의한 전송)		 → 복사본이 넘어감
 *			2)Call By Reference(주소에 의한 전송) → 클래스, 배열(예외 : String) / → 원본이 넘어감
 *			
 * ======================================
 * 
 * 생성자 : 시작과 동시에 처리하는 내용 / 변수의 초기화 → 객체 1개당 한번만 호출 가능
 * 객체 저장시에 반드시 생성자가 호출되어야 함
 * 생성자는 호출시에 반드시 new를 사용
 * 
 * 
 */
class Sawon
{
	// 멤버변수
	int sabun=(int)(Math.random()*100)+1; 		// 0 → 명시적인 초기값
	String name;	// null
	String dept;	// null, double → 0.0, char → '\0'
	
	// 초기값
	// 기능추가 → 오버로딩 
	public Sawon()
	{
		name="홍길동";
		dept="개발부";
		// 쓰레드 구동, 오라클연결, 서버연결, 자동로그인
	}
	// 사용자로부터 입력을 받아서 처리
	public Sawon(String name,String dept)
	{
		this.name=name;
		this.dept=dept;
		// this → static  / 생성되는 시점(Sawon s=new Sawon())
		// JVM → this=s
	}
	
	// 변수찾는경우 → 1. 지역변수(지역변수,매개변수) → 2. 멤버변수
	public void display()
	{
		System.out.println("이름:"+name+", 부서:"+dept);
	}
	
	public void Sawon() 		// 일반 메소드
	{
		System.out.println("Sawon Call");
	}
	
	// 생성자는 필요한 클래스에서 언제든지 호출이 가능(접근지정어 : public)
}

// 사용법, 호출방법(생성자) → new 


public class MainClass {
	public static void main(String[] args) {
		//System.out.printf("");
		// String, Object... → Object는 모든 데이터를 받을 수 있다
		Sawon s1=new Sawon(); 	// 디폴트 생성자(생성자를 구현하지 않은 경우 → 자동생성)
		System.out.println("이름:"+s1.name+", 부서:"+s1.dept);
		Sawon s2=new Sawon("박문수","영업부");
		System.out.println("이름:"+s2.name+", 부서:"+s2.dept);
		s1.display();
		s2.display();
		s1.Sawon();
		System.out.println("==========================");
		
		new Sawon().display();
		new Sawon("이순신","기획부").display();
		
	}
}
